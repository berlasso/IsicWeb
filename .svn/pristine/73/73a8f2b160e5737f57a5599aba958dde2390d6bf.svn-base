using ISIC.Entities;
using MPBA.DataAccess;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using jsTree3.Models;
using Newtonsoft.Json;
using MPBA.Jira;
using ISIC.Services;
using MPBA.Jira.Model;
using ISICWeb.Models;
using MPBA.RenaperClient;
using ISIC.Enums;
using System.Drawing.Imaging;
using ISIC.Utils;


namespace ISICWeb.Controllers
{
    [Audit]
    [Authorize]
    public class ImputadoController : Controller
    {
        
        IRepository repository;
        private IJiraService jiraService;
        private IImputadoService imputadoService;
        private RenaperClient RenaperClient;
        private MegaMatcherService MegaMatcherService;
        private ICotejoRenaperService cotejoRenaperService;

        public ImputadoController()
        {
        }

        public ImputadoController(IRepository repository, IJiraService jiraService, 
            IImputadoService imputadoService, RenaperClient RenaperClient,
            MegaMatcherService MegaMatcherService, ICotejoRenaperService cotejoRenaperService) 
        {
            this.repository = repository;
            this.jiraService = jiraService;
            this.imputadoService = imputadoService;
            this.RenaperClient = RenaperClient;
            this.MegaMatcherService = MegaMatcherService;
            this.cotejoRenaperService = cotejoRenaperService;
        }

        #region GETS
        
        // GET: Imputado
        public ActionResult Index()
        {
            var imputados = repository.Set<Imputado>().ToList();
           
            return View(imputados);
        }

        // GET: ImputadoPorTareas
        public ActionResult IndexPorTareas()
        {
            //var imputados = repository.Set<Imputado>().ToList().FindAll(delegate(Imputado imp) { return imp.UsuarioCreacionI == usuario && imp.Estado.Id == idEstado; });

            //return View(imputados);
            return View();
        }

        public JsonResult GetJsTree3Data()
        {

            var estados = new List<string>(new string[] {  "En OTIP", "Para segmentar", "Para cotejo local", "Para cotejo en Federal", "Closed" });
       
            var imputados = repository.Set<Imputado>().ToList().FindAll(delegate(Imputado imp) { return imp.UsuarioAsignadoI == User.Identity.Name.ToString(); });

            var children = new List<JsTree3Node>();

         
            ArrayList alNodos=new ArrayList();
            
            foreach (string estado in estados)
            {
                var root = new  // Create our root node and ensure it is opened
                {
                    id = estado,
                    text = estado,
                    state = new State(false, false, false),
                    children=true
                };
                alNodos.Add(root);
            }

        
            return Json(alNodos, JsonRequestBehavior.AllowGet);
        }

        public JsonResult GetJsTree3DataNode(string estado)
        {
            ArrayList alNodos = new ArrayList();

            if (estado == "En Otip")
            {
                var departamentos = repository.Set<Departamento>().Where(d => d.Id != 0 && d.Id != 20 && d.Id != 21).ToList();
                foreach (Departamento departamento in departamentos)
                {
                    string id = departamento.Id.ToString();
                    var root = new // Create our root node and ensure it is opened
                    {
                        id = id,
                        text = departamento.DepartamentoNombre,
                        state = new State(false, false, false),
                        children = new List<JsTree3Node>()
                    };
                    var issues = jiraService.GetIssuesByQuery("IG", "FichasDactiloscopicas", "status = \"" + estado + "\"");

                    foreach (Issue<IssueFields> issue in issues)
                    {
                        string deptoIssue = issue.fields.summary.Trim().Substring(2,2);
                        if (Convert.ToInt32(deptoIssue) == departamento.Id )
                        root.children.Add(JsTree3Node.NewNode(issue.fields.summary.Trim()));
                    }
                    alNodos.Add(root);
                }
            }
            else
            {
                var issues = jiraService.GetIssuesByQuery("IG", "FichasDactiloscopicas", "status = \"" + estado + "\""); // AND assignee = " + User.Identity.Name.ToString());
                
                foreach (Issue<IssueFields> issue in issues)
                {
                    string id = issue.fields.summary.Trim();
                    var root = new  // Create our root node and ensure it is opened
                    {
                        id = id,
                        text = id,
                        state = new State(false, false, false),
                        //children = true
                    };
                    alNodos.Add(root);
                    // nodeEstado.children.Add(JsTree3Node.NewNode(issue.fields.summary));
                }
            }

            
            return Json(alNodos, JsonRequestBehavior.AllowGet);
        }



        // GET: Imputado/Details/5
        public ActionResult Details(int id)
        {
            var imputado = repository.Set<Imputado>().FirstOrDefault(s => s.Id == id);
            return View(imputado);
        }

        // GET: Imputado/Create
        public ActionResult Create()
        {

            ViewBag.EstadoId = new SelectList(repository.Set<SICEstadoTramite>().ToList(), "Id", "Descripcion");
            return View();
        }

        // GET: Imputado/Edit/5
        public ActionResult Edit(int id)
        {
            ViewBag.EstadoId = new SelectList(repository.Set<SICEstadoTramite>().ToList(), "Id", "Descripcion");
            var ImputadoDB = repository.Set<Imputado>().FirstOrDefault(s => s.Id == id);
            return View(ImputadoDB);
        }

        // GET: Imputado/Delete/5
        public ActionResult Delete(int id)
        {
            var Imputado = repository.Set<Imputado>().FirstOrDefault(s => s.Id == id);
            return View(Imputado);
        }

        public ActionResult CheckRenaper(string CodigoBarra)
        {

            if (!string.IsNullOrEmpty(CodigoBarra))
            {
                ViewBag.CodigoBarra = CodigoBarra;
            }
            return View();

        }

       
        
        #endregion

        #region POSTs

        // POST: Imputado/Create
        [HttpPost]
        public ActionResult Create(Imputado Imputado)
        {
            try
            {
                //ViewBag.EstadoId = new SelectList(repository.Set<SICEstadoTramite>().ToList(), "Id", "Descripcion", Imputado.Estado.Id)
                //ViewBag.EstadoId = new SelectList(repository.Set<SICEstadoTramite>().ToList());
                var Estado = repository.Set<SICEstadoTramite>().SingleOrDefault(s => s.Id == Imputado.Estado.Id);
                Imputado.Estado = Estado;
                repository.UnitOfWork.RegisterNew(Imputado);
                repository.UnitOfWork.Commit();
                return RedirectToAction("Index");
            }
            catch
            {
                ModelState.AddModelError("", "No se pudieron guardar los cambios. Intentar nuevamente, si el problema persiste contacte al administrador del sistema.");
                return View();
            }
        }

        // POST: Imputado/Edit/5
        [HttpPost]
        public ActionResult Edit(int id, Imputado Imputado)
        {
            try
            {
                var ImputadoDB = repository.Set<Imputado>().SingleOrDefault(s => s.Id == id);
                ImputadoDB.Prontuario = Imputado.Prontuario;
                ImputadoDB.CodigoDeBarras = Imputado.CodigoDeBarras;
                ImputadoDB.CodigoDeBarrasOriginal = Imputado.CodigoDeBarrasOriginal;
                

                repository.UnitOfWork.RegisterChanged(ImputadoDB);
                repository.UnitOfWork.Commit();

                return RedirectToAction("Index");
            }
            catch
            {
                ModelState.AddModelError("", "No se pudieron guardar los cambios. Intentar nuevamente, si el problema persiste contacte al administrador del sistema.");
                return View();
            }
        }

        // POST: Imputado/Delete/5
        [HttpPost]
        public ActionResult Delete(int id, Imputado Imputado)
        {
            try
            {
                var ImputadoDB = repository.Set<Imputado>().SingleOrDefault(s => s.Id == id);
                repository.UnitOfWork.RegisterDeleted(ImputadoDB);
                repository.UnitOfWork.Commit();

                return RedirectToAction("Index");
            }
            catch
            {
                ModelState.AddModelError("", "No se pudieron guardar los cambios. Intentar nuevamente, si el problema persiste contacte al administrador del sistema.");
                return View();
            }
        }

        [HttpPost]
        public ActionResult SeleccionHuellasRenaper(string CodigoBarra)
        {
            Imputado imputado = this.imputadoService.GetByCodigoBarra(CodigoBarra);
            return View(imputado);
        }

        [HttpPost]
        public ActionResult CheckRenaper(CheckRenaperViewModel model)
        {
            //Chequear con renaper
            
            Imputado imputado = this.imputadoService.GetByCodigoBarra(model.CodigoDeBarras);

            BioDactilar dedo1 = null;
            BioDactilar dedo2 = null;

            if (model.dedosDerecha != null && model.dedosDerecha.Count() == 2)
            {
                dedo1 = imputado.BioManoDerecha.First(de => de.Dedo.Equals((ClaseDedo)model.dedosDerecha[0]));
                dedo2 = imputado.BioManoDerecha.First(de => de.Dedo.Equals((ClaseDedo)model.dedosDerecha[1]));
            }
            else if (model.dedosIzquierda != null && model.dedosIzquierda.Count() == 2)
            {
                dedo1 = imputado.BioManoIzquierda.First(de => de.Dedo.Equals((ClaseDedo)model.dedosIzquierda[0]));
                dedo2 = imputado.BioManoIzquierda.First(de => de.Dedo.Equals((ClaseDedo)model.dedosIzquierda[1]));
            }
            else // model.dedosDerecha.Count() == 1 && model.dedosIzquierda.Count() == 1
            {
                dedo1 = imputado.BioManoDerecha.First(de => de.Dedo.Equals((ClaseDedo)model.dedosDerecha[0]));
                dedo2 = imputado.BioManoIzquierda.First(de => de.Dedo.Equals((ClaseDedo)model.dedosIzquierda[0]));
            }

            string h1 = MegaMatcherService.ConvertBytesToWSQBase64(dedo1.imagen, ImageFormat.Png);
            string h2 = MegaMatcherService.ConvertBytesToWSQBase64(dedo2.imagen, ImageFormat.Png);
            string h1d = DedosUtils.GetIdentificacionRenaper(dedo1.Mano,dedo1.Dedo).ToString();
            string h2d = DedosUtils.GetIdentificacionRenaper(dedo2.Mano, dedo2.Dedo).ToString();

            var tcn = RenaperClient.GenerarTransaccion(Int32.Parse(model.DNI), imputado.Persona.Sexo.descripcion == "Masculino" ? "M" : "F", h1, h1d, h2, h2d);
            //var tcn = RenaperClient.GenerarTransaccion(26995780, imputado.Persona.Sexo.descripcion == "Masculino" ? "M" : "F", h1, h1d, h2, h2d);

            cotejoRenaperService.Agregar(new CotejoRenaper() { Tcn = tcn, CodigoDeBarras = imputado.CodigoDeBarras });
            

            
            return View();
        }

        #endregion


    }
}