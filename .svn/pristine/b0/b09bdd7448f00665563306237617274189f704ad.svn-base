using System;
using System.Globalization;
using System.Linq;
using System.Linq.Dynamic;
using System.Web.Mvc;
using ISIC.Entities;
using ISICWeb.Areas.Otip.Models;
using MPBA.DataAccess;
using ISICWeb.Models;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using Imputado = ISIC.Entities.Imputado;

//using System.Data.Entity.Core.Objects;

namespace ISICWeb.Services
{
    public class ImputadosSimilaresService : ISIC.Services.ImputadoService
    {
        private IRepository repository;


        public ImputadosSimilaresService(IRepository repository)
            : base(repository)
        {
            this.repository = repository;

        }

         /* Metodo que Dado un Codigo de Prontuario retorna los imputados */

        public List<ImputadosSimilaresViewModel> ScorePorProntuario(string CodProntuario,string codbarra)
        {
            Imputado imputado = repository.Set<Imputado>().FirstOrDefault(x => x.CodigoDeBarras == codbarra);
            if (imputado==null)return null;


            IEnumerable<Imputado> imputadosp = repository.Set<Imputado>().Where(x => x.Prontuario.ProntuarioNro == CodProntuario).ToList();

            IList<ImputadosSimilaresViewModel> imputadosParecidos = new List<ImputadosSimilaresViewModel>();
            foreach (var i in imputadosp)
            {
                ImputadosSimilaresViewModel elemento = new ImputadosSimilaresViewModel()
                {
                    Apellido = i.Persona.Apellido,
                    Nombres = i.Persona.Nombre,
                    Apodo = i.Persona.Apodo,
                    NombreMadre = i.Persona.Madre,
                    EdadActual = (i.Persona.FechaNacimiento != null && i.Persona.FechaNacimiento.Value.Year > 1910) ? ((i.Persona.FechaNacimiento.Value.Month < DateTime.Today.Month || (i.Persona.FechaNacimiento.Value.Month == DateTime.Today.Month && i.Persona.FechaNacimiento.Value.Day < DateTime.Today.Day)) ? DateTime.Today.Year - i.Persona.FechaNacimiento.Value.Year : DateTime.Today.Year - i.Persona.FechaNacimiento.Value.Year - 1) : 0,
                    BioManoDerecha = i.BioManoDerecha,
                    ProntuarioSIC = i.Prontuario.ProntuarioNro,
                    CodigoDeBarras = i.CodigoDeBarrasOriginal,
                    Id = i.Id,
                    BioManoIzquierda = i.BioManoIzquierda,
                    DocumentoNumero = i.Persona.DocumentoNumero,
                    FechaFichaje = i.FechaCreacionI,
                    SCNombreMadre = i.Persona.Madre == imputado.Persona.Madre ? 5 : 0,
                    SCApodo = i.Persona.Apodo == imputado.Persona.Apodo ? 5 : 0,
                    SCDocumento = i.Persona.DocumentoNumero == imputado.Persona.DocumentoNumero ? 15 : 0,
                    SCApeyNom = (i.Persona.Nombre == imputado.Persona.Nombre && i.Persona.Apellido == imputado.Persona.Apellido ? 10 : 0),
                    SCApellido = (i.Persona.Apellido == imputado.Persona.Apellido ? 9 : 0),
                    SCEdad = (i.Persona.FechaNacimiento != null && imputado.Persona.FechaNacimiento != null && imputado.Persona.FechaNacimiento.Value.Year > 1910 && i.Persona.FechaNacimiento.Value.Year > 1910) ?
                    ((i.Persona.FechaNacimiento == null ? 0 : (DateTime.Compare(DateTime.Now, i.Persona.FechaNacimiento.Value) <=
                    DateTime.Compare(DateTime.Now, imputado.Persona.FechaNacimiento.Value) + 10 &&
                  DateTime.Compare(DateTime.Now, i.Persona.FechaNacimiento.Value) >=
                  DateTime.Compare(DateTime.Now, imputado.Persona.FechaNacimiento.Value) - 10) ? 4 : 0)) : 0
                };
                elemento.ScoreTotal = elemento.SCEdad + elemento.SCApellido + elemento.SCApeyNom + elemento.SCDocumento;
                if (elemento.ScoreTotal >= 5)
                {
                    // Atencion SOLAMENTE se agregan los imputados cuyo Score sea mayor o igual a 10 
                    elemento.Extraccion = i.BioManoDerecha.ToList().Exists(x => x.imagen.Length > 0) || i.BioManoIzquierda.ToList().Exists(x => x.imagen.Length > 0);
                    imputadosParecidos.Add(elemento);
                }

            }
            return imputadosParecidos.OrderByDescending(x => x.ScoreTotal).ToList();



        }


       

        /*Metodo que retorna los imputados similares y su Score sgrupados por Codigo de Prontuario*/
        public List<ImputadosSimilaresViewModel> BusquedaSimilaresDatosPersonales(Imputado imputado)
        {
            
            if (imputado == null)
                return null;
            int scoreMinimo = 5;
            var imputadosParecidos = from i in repository.Set<Imputado>().Where(i =>
                            (i.Persona.Sexo.Id == imputado.Persona.Sexo.Id && i.Id != imputado.Id &&
                                                                         (i.Persona.Apellido == imputado.Persona.Apellido ||
                                                                            i.Persona.Apodo == imputado.Persona.Apodo ||
                                                                           i.Persona.DocumentoNumero == imputado.Persona.DocumentoNumero ||
                                                                           i.Persona.Madre == imputado.Persona.Madre ||
                                                                           (i.Persona.FechaNacimiento != null && imputado.Persona.FechaNacimiento != null && i.Persona.FechaNacimiento.Value.Year > 1910 && imputado.Persona.FechaNacimiento.Value.Year > 1910 &&
                                                                            Math.Abs(DbFunctions.DiffYears(i.Persona.FechaNacimiento, imputado.Persona.FechaNacimiento) ?? 0) < 10
                                                                          ))))
                                     let SCApellido = (i.Persona.Apellido == imputado.Persona.Apellido ? 9 : 0)
                                     let SCApodo = i.Persona.Apodo == imputado.Persona.Apodo ? 5 : 0
                                     let SCDocumento = i.Persona.DocumentoNumero == imputado.Persona.DocumentoNumero ? 15 : 0
                                     let SCApeyNom = (i.Persona.Nombre == imputado.Persona.Nombre && i.Persona.Apellido == imputado.Persona.Apellido ? 10 : 0)
                                     let SCEdad = (i.Persona.FechaNacimiento != null && imputado.Persona.FechaNacimiento != null && imputado.Persona.FechaNacimiento.Value.Year > 1910 && i.Persona.FechaNacimiento.Value.Year > 1910) ?
                                                   ((i.Persona.FechaNacimiento == null ? 0 : (DateTime.Compare(DateTime.Now, i.Persona.FechaNacimiento.Value) <=
                                                   DateTime.Compare(DateTime.Now, imputado.Persona.FechaNacimiento.Value) + 10 &&
                                                     DateTime.Compare(DateTime.Now, i.Persona.FechaNacimiento.Value) >=
                                                     DateTime.Compare(DateTime.Now, imputado.Persona.FechaNacimiento.Value) - 10) ? 4 : 0)) : 0
                                     let SCNombreMadre = i.Persona.Madre == imputado.Persona.Madre ? 5 : 0
                                     let ScoreTotal = SCEdad + SCApellido + SCApeyNom + SCDocumento
                                     let EdadActual = (i.Persona.FechaNacimiento != null && i.Persona.FechaNacimiento.Value.Year > 1910) ? ((i.Persona.FechaNacimiento.Value.Month < DateTime.Today.Month || (i.Persona.FechaNacimiento.Value.Month == DateTime.Today.Month && i.Persona.FechaNacimiento.Value.Day < DateTime.Today.Day)) ? DateTime.Today.Year - i.Persona.FechaNacimiento.Value.Year : DateTime.Today.Year - i.Persona.FechaNacimiento.Value.Year - 1) : 0
                                     let totalycb = ScoreTotal.ToString() + i.CodigoDeBarras
                                     where ScoreTotal >= scoreMinimo
                                     select new
                                     {
                                         ScoreTotal,
                                         SCEdad,
                                         SCDocumento,
                                         SCApeyNom,
                                         SCNombreMadre,
                                         SCApellido,
                                         SCApodo,
                                         i.Id,
                                         i.CodigoDeBarras,
                                         ProntuarioSIC = i.Prontuario.ProntuarioNro,
                                         i.Persona.Apellido,
                                         NombreMadre = i.Persona.Madre,
                                         ScoreMax = "S",
                                         Nombres = i.Persona.Nombre,
                                         EdadActual,
                                         i.Persona.Apodo,
                                         i.Persona.DocumentoNumero,
                                         CantidadCoincidencias = ((SCEdad != 0) ? 1 : 0) + ((SCApellido != 0) ? 1 : 0) + ((SCApeyNom != 0) ? 1 : 0) + ((SCNombreMadre != 0) ? 1 : 0) + ((SCDocumento != 0) ? 1 : 0),
                                         totalycb
                                     };
            var agrupado = from ip in imputadosParecidos
                           group ip by ip.ProntuarioSIC into g
                           select new
                           {
                               g.Key,
                               cb = g.Max(x => x.totalycb.Substring(x.totalycb.Length - 13, x.totalycb.Length - 1))
                           };
            IQueryable<ImputadosSimilaresViewModel> final = from a in agrupado
                                                            join ip in imputadosParecidos on a.cb equals ip.CodigoDeBarras
                                                            select new ImputadosSimilaresViewModel()
                                                            {
                                                                Apellido = ip.Apellido,
                                                                Apodo = ip.Apodo,
                                                                CantidadCoincidencias = ip.CantidadCoincidencias,
                                                                CodigoDeBarras = ip.CodigoDeBarras,
                                                                DocumentoNumero = ip.DocumentoNumero,
                                                                EdadActual = ip.EdadActual,
                                                                Id = ip.Id,
                                                                NombreMadre = ip.NombreMadre,
                                                                Nombres = ip.Nombres,
                                                                ProntuarioSIC = ip.ProntuarioSIC,
                                                                SCApellido = ip.SCApellido,
                                                                SCApodo = ip.SCApodo,
                                                                SCApeyNom = ip.SCApeyNom,
                                                                SCDocumento = ip.SCDocumento,
                                                                SCEdad = ip.SCEdad,
                                                                SCNombreMadre = ip.SCNombreMadre,
                                                                ScoreMax = ip.ScoreMax,
                                                                ScoreTotal = ip.ScoreTotal
                                                            };
            return final.ToList();

        }




    }
}
