@model JAFIS.Models.EditorInputModel
@{
    ViewBag.Title = "DefinirDedos";
}
@{Html.EnableClientValidation();}
@{Html.EnableUnobtrusiveJavaScript();}


    <style type="text/css" >
        .main-content {
            background: url("../Images/accent.png") no-repeat;
                padding-top: 0px;
            margin-left: 0px;
            margin-top:0px;
        }
            input [type=radio], input[type=checkbox]; {
            display: none;
            margin-left:60px;
        }

    input[type=radio] + label:before {
        content: "";
        display: inline-block;
        width: 15px;
        height: 15px;
        vertical-align: middle;
        margin-right: 8px;
        background-color: #aaa;
        box-shadow: inset 0px 2px 2px rgba(0, 0, 0, .3);
        border-radius: 8px;
    }

    input[type=checkbox] + label:before {
        content: "";
        display: inline-block;
        width: 15px;
        height: 15px;
        vertical-align: middle;
        margin-right: 8px;
        background-color: #aaa;
        box-shadow: inset 0px 2px 2px rgba(0, 0, 0, .3);
        border-radius: 4px;
    }

    input[type=radio]:checked + label:before {
        content: "\2022";
        color: white;
        background-color: #666;
        font-size: 1.8em;
        text-align: center;
        line-height: 14px;
        text-shadow: 0px 0px 3px #eee;
    }

    input[type=checkbox]:checked + label:before {
        content: "\2714";
        color: white;
        background-color: #666;
        text-align: center;
        line-height: 15px;
        text-shadow: 0px 0px 3px #eee;
    }
        .page-header {
            margin-top: 4px;
            padding-bottom: 0;
            margin-left: -12px;
            margin-right: -12px;
        }
        .jcropper-holder {
            border: 1px black solid;
        }
</style>

<script type="text/javascript">

    function linkUp(unusedIndex, container) {
        container = $(container); //We were passed a DOM reference, convert it to a jquery object

        //The code will look for a img.image, a div.preview, a.result, an input.result inside the specified container, and link them together.
        //Only 'img.image' is required, however.


        //Find the original image
        var image = container.find("img.image");

        //Find the original aspect ratio of the image
        var originalRatio = image.width() / image.height()

        //Defaults to false if a checkbox with class="keepAspectRatio" doesn't exist.
        var keepRatio = container.find('.keepAspectRatio').size() < 1 ? false : container.find('.keepAspectRatio').is(':checked');

        //jCrop will enforce this ratio:
        var forcedRatio = keepRatio ? originalRatio : null;

        //Find the URL of the original image minus the querystring.
        var path = image.attr('src');
        if (path.indexOf('?') > 0) path = path.substr(0, path.indexOf('?'));
        if (path.indexOf(';') > 0) path = path.substr(0, path.indexOf(';')); //For parsing Amazon-cloudfront compatible querystrings

        var cloudFront = image.attr('src').indexOf(';') > -1; //To use CloudFront-friendly URLs.

        //Find the preview div(s) (if they exist) and make sure the have a set height and width.
        var divPreview = container.find("div.preview");

        //What size to make the preview window (defaults to existing width/height if specified in 'style' attribute)
        var previewFallbackWidth = 100;
        var previewFallbackHeight = 100;

        //Allow the div to override the default width and height in the style attribute
        var previewMaxWidth = (divPreview.attr('style') != null && divPreview.attr('style').indexOf('width') > -1) ? divPreview.width() : previewFallbackWidth;
        var previewMaxHeight = (divPreview.attr('style') != null && divPreview.attr('style').indexOf('height') > -1) ? divPreview.height() : previewFallbackHeight;
        //Set the values explicitly.
        divPreview.css({
            width: previewMaxWidth + 'px',
            height: previewMaxHeight + 'px',
            overflow: 'hidden'
        });

        //Create another child div and style it to form a 'clipping rectangle' for the preview div.
        var innerPreview = $('<div />').css({
            overflow: 'hidden'
        }).addClass('innerPreview').appendTo(divPreview);

        //Create a copy of the image inside the inner preview div(s)
        $('<img />').attr('src', image.attr('src')).appendTo(innerPreview);

        //Find any links (if they exist)
        var links = container.find('a.result');
        //And any input fields (for postbacks, if desired)
        var inputs = container.find('input.result');


        //Create a function to update the link, hidden input, and preview pane
        var update = function (coords) {
            if (parseInt(coords.w) <= 0 || parseInt(coords.h) <= 0) return; //Require valid width and height



       /*     $("#Top").val(coords.y);
            $("#Left").val(coords.x);
            $("#Bottom").val(coords.y2);
            $("#Right").val(coords.x2);*/

            //The aspect ratio of the cropping rectangle. If 'keepRatio', use originalRatio since it's more precise.
            var cropRatio = keepRatio ? originalRatio : (coords.w / coords.h);


            //When the selection aspect ratio changes, the preview clipping area has to also.
            //Calculate the width and height.

            var innerWidth = cropRatio >= (previewMaxWidth / previewMaxHeight) ? previewMaxWidth : previewMaxHeight * cropRatio;
            var innerHeight = cropRatio < (previewMaxWidth / previewMaxHeight) ? previewMaxHeight : previewMaxWidth / cropRatio;


            innerPreview.css({
                width: Math.ceil(innerWidth) + 'px',
                height: Math.ceil(innerHeight) + 'px',
                marginTop: (previewMaxHeight - innerHeight) / 2 + 'px',
                marginLeft: (previewMaxWidth - innerWidth) / 2 + 'px',
                overflow: 'hidden'
            });
            //Set the outer div's padding so it stays centered
            divPreview.css({

            });
            var alto = $('#innerPreview').attr('height') ;
            var ancho = $('#innerPreview').attr('width');
            var altoDeca =$('#imagencrop').attr('height');
            var anchoDeca = $('#imagencrop').attr('width');

          
            $('#Height').val(alto);
            $('#Width').val(ancho);
            $("#Top").val(coords.y);
            $("#Left").val(coords.x);
            $("#Bottom").val(coords.y2);
            $("#Right").val(coords.x2);
            $('#AltoDeca').val(altoDeca);
            $('#AnchoDeca').val(anchoDeca);

            //Calculate how much we are shrinking the image inside the preview window
            var scalex = innerWidth / coords.w;
            var scaley = innerHeight / coords.h;

            //Set the width and height of the image so the right areas appear at the right scale appear.
            innerPreview.find('img').css({
                width: Math.round(scalex * image.width()) + 'px',
                height: Math.round(scaley * image.height()) + 'px',
                marginLeft: '-' + Math.round(scalex * coords.x) + 'px',
                marginTop: '-' + Math.round(scaley * coords.y) + 'px'
                });


            //Calculate the querystring
            var query = '?';

            //Add final size, if specified.
            var inputWidth = container.find('input.width');
            var inputHeight = container.find('input.height');
            if (inputWidth.size() > 0 && parseInt(inputWidth.val()) > 1) query += 'maxwidth=' + inputWidth.val() + '&';
            if (inputHeight.size() > 0 && parseInt(inputHeight.val()) > 1) query += 'maxheight=' + inputHeight.val() + '&';

            //Add crop rectangle
            query += 'crop=(' + coords.x + ',' + coords.y + ',' + coords.x2 + ',' + coords.y2 + ')&cropxunits=' + image.width() + '&cropyunits=' + image.height()
            //Replace ? and & with ; if using Amazon Cloudfront
            if (cloudFront) query = query.replace(/\?\&/g, ';');

            //Now, update the links and input values.
            links.attr('href', path + query);
            inputs.attr('value', path + query);

        }

        //Start up jCrop
        // set the selection area [left, top, width, height]
        var jcrop_reference = $.Jcrop(image);
        jcrop_reference.setOptions({
            onChange: update,
            onSelect: update,
            aspectRatio: forcedRatio,
            setSelect: [30, 30,342,360],
            bgColor: 'black',
             bgOpacity: 0.6
        });

        //Call the function to init the preview windows
            update({ x: 0, y: 0, x2: image.width(), y2: image.height(), w: image.width(), h: image.height() });
        

        //Handle the 'lock ratio' checkbox change vent
        container.find('.keepAspectRatio').change(function (e) {
            //Update keepRatio value
            keepRatio = this.checked;

            //Update the forcedRatio value
            forcedRatio = keepRatio ? originalRatio : null;

            //Update the jcrop settings
            jcrop_reference.setOptions({ aspectRatio: forcedRatio });
            jcrop_reference.focus();
        });

    }

    // Remember to invoke within jQuery(window).load(...)
    // If you don't, Jcrop may not initialize properly
    jQuery(window).load(function () {
        $('#imagencrop').attr('src', '..' + "@Model.Profile.ImageUrl");
        $('.image-cropper').each(linkUp);
    });


</script>
<div style="padding-left: 0; padding-top: 0px; margin-left: 0px !important;">
@using (Html.BeginForm("GuardarDedoIndividual", "Huella"))
      {
    <br /> 
    
       
        <div class="image-cropper">
            <table>
                <tr>
                    <td>
                        <input type="submit" value="Digitaliza Dedo" />
                        <img width="1650" height="600" src="" id="imagencrop" class="image" />
                    </td>
                    <td>
                        <div style="margin:10px; width:300px; text-align:center">
                            <div class="preview" style="width:200px;height:200px">
                                <a class="result" href="#">Ver Imagen</a><br />
                                <div id="divDigitales">
                                    @{Html.RenderPartial("VisualizaDecaDigital", Model);}
                                </div>
                            </div>
                       
          
                            
                            <input id="img1" type="hidden" class="result" value=""  />
                          
                           
                            @Html.HiddenFor(x => x.Left)
                            @Html.HiddenFor(x => x.Right)
                            @Html.HiddenFor(x => x.Top)
                            @Html.HiddenFor(x => x.Bottom)
                            @Html.HiddenFor(x => x.Height)
                            @Html.HiddenFor(x => x.Width)
                            @Html.HiddenFor(x => x.Profile.ImageUrl)
                       
                            @Html.HiddenFor(x => x.AltoDeca)
                            @Html.HiddenFor(x => x.AnchoDeca)

                             @Html.HiddenFor(x => x.dedoSeleccion)


                            @Html.EditorFor(x => x.deca)
                        
                          
                        </div>
                    </td>
                </tr>
            </table>
        </div>
        }


<div id="divDigitales">
    
    @{Html.RenderPartial("VisualizaDecaDigital", Model);}
</div>

 </div>  
  
